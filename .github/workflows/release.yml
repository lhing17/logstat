name: Release on Branch Creation

on:
  push:
    branches:
      - 'release/**'  # 当创建以 release/ 开头的分支时触发

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu]  # 目标平台
        include:
          - target: x86_64-unknown-linux-gnu
            ext: ""

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Extract branch name
      id: branch-name
      run: |
        # 获取分支名称（去掉 refs/heads/ 前缀）
        BRANCH_NAME=$(echo ${{ github.ref }} | sed 's/refs\/heads\///')
        # 提取版本号（假设分支格式为 release/v1.0.0）
        VERSION=$(echo $BRANCH_NAME | sed 's/release\///; s/v//')
        echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$VERSION" >> $GITHUB_OUTPUT

    - name: Install Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
        targets: ${{ matrix.target }}

    - name: Build release binaries
      run: cargo build --release --target ${{ matrix.target }}

    - name: Prepare release assets
      run: |
        mkdir -p release
        # 复制二进制文件（根据平台处理扩展名）
        if [ "${{ matrix.target }}" = "x86_64-pc-windows-msvc" ]; then
          cp -r target/${{ matrix.target }}/release/*.exe release/
        else
          cp -r target/${{ matrix.target }}/release/* release/
        fi
        # 添加其他文件
        cp README.md LICENSE release/

    - name: Create GitHub Release
      id: create-release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.branch-name.outputs.tag }}
        name: Release ${{ steps.branch-name.outputs.version }}
        body: "Automated release from branch: ${{ steps.branch-name.outputs.branch_name }}"
        files: |
          release/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}